{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","id","name","email","className","alt","src","CardList","robots","cardComponents","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","resp","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCASC,MAff,SAAcC,GAAQ,IACbC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MAEjB,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACE,gCAAMC,EAAN,KACA,+BAAKC,EAAL,QCQOI,MAff,YAA8B,IAAVC,EAAS,EAATA,OAKZC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAEhF,OACE,6BACGM,ICGQK,MAff,YAAkD,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAChC,OACE,yBAAKZ,UAAU,OACb,2BACEA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEHI,MATf,SAAgBpB,GAEd,OACE,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClExB,EAAMyB,WCiBEC,E,kDApBb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACN,uDAEFG,KAAK/B,MAAMyB,a,GAhBKQ,IAAMC,WCoFlBC,G,wDAjEb,aAAe,IAAD,8BACZ,gBAkBFC,eAAiB,SAACC,GAGhB,EAAKL,SAAS,CAAEjB,YAAasB,EAAMC,OAAOC,SApB1C,EAAKZ,MAAQ,CAEXnB,OAAQ,GACRO,YAAa,IALH,E,gEASO,IAAD,OAElByB,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAYhC,IAAD,EACyBb,KAAKJ,MAA7BnB,EADD,EACCA,OAAQO,EADT,EACSA,YAEV8B,EAAiBrC,EAAOsC,QAAQ,SAAAC,GACpC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAKvD,OAAuB,IAAlBxC,EAAO0C,OAER,yBAAK9C,UAAU,MACb,2CAKF,yBAAKA,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWY,aAAce,KAAKK,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAAQqC,W,GAhDdZ,IAAMC,Y,YCPxBiB,IAASC,OAGP,kBAAC,EAAD,MAIAC,SAASC,eAAe,SP+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.1389edec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n// we need react here to understand JSX\r\nfunction Card(props) {\r\n  const {id, name, email} = props\r\n\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2> {name} </h2>\r\n        <p> {email} </p>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n// import {robots} from './robots'\r\n\r\nfunction CardList( {robots} ){\r\n  // if (true) {\r\n  //   throw new Error('NOOOOOOO!')\r\n  // }\r\n  \r\n  const cardComponents = robots.map((user, i) => {\r\n    return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n  })\r\n  return (\r\n    <div>\r\n      {cardComponents}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react'\r\n\r\nfunction SearchBox( {searchfield, searchChange} ) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\" \r\n        onChange={searchChange}\r\n        />\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default SearchBox; \r\n ","import React from 'react'\r\n\r\nfunction Scroll(props) {\r\n  // return props.children\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react'\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError)  {\r\n      return <h1>Ooops, that is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\n// import {robots} from './robots'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"tc\">\r\n//       <h1>RoboFriends</h1>\r\n//       <SearchBox />\r\n//       <CardList robots={robots} />      \r\n//     </div>\r\n//   )\r\n// }\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      // robots: robots,\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log(this.props.store.getState())\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(resp => resp.json())\r\n      .then(users => this.setState({robots: users}))\r\n  }\r\n\r\n\r\n  // bw: callback func for searchbar event handler\r\n  // use => arrow function for callback which using this\r\n  onSearchChange = (event) => {\r\n    // console.log(event.target.value)\r\n    // const searchField = event.target.value \r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n\r\n    const filteredRobots = robots.filter( robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n    // console.log('robots: ', robots)\r\n\r\n    // bw: for slow loading\r\n    if ( robots.length === 0 ) {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      ) \r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1>RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n               \r\n        </div>\r\n      ) \r\n    }\r\n\r\n    // return (\r\n    //   <div className=\"tc\">\r\n    //     <h1>RoboFriends</h1>\r\n    //     <SearchBox searchChange={this.onSearchChange} />\r\n    //     <CardList robots={filteredRobots} />      \r\n    //   </div>\r\n    // ) \r\n  }\r\n}\r\n\r\nexport default App;\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import {Provider} from 'react-redux'\n// import {createStore} from 'redux'\nimport * as serviceWorker from './serviceWorker';\n// import Card from './Card'\n// import CardList from './CardList'\nimport App from './containers/App'\nimport 'tachyons'\nimport './index.css';\n// import {robots} from './robots'\n\n\nReactDOM.render(\n  // <App />,\n  // <CardList robots={robots} />,\n  <App />,\n  // <Provider store={store}>\n  //   <App />\n  // </Provider>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}